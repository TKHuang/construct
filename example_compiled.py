# generated by Construct, this source is for inspection only! do not import!
from shio import *
from shio.lib import *
from io import BytesIO
import struct
import collections
import itertools
def read_bytes(io, count):
    if not count >= 0: raise StreamError
    data = io.read(count)
    if not len(data) == count: raise StreamError
    return data
def restream(data, func):
    return func(BytesIO(data))
def reuse(obj, func):
    return func(obj)
linkedinstances = {}
linkedparsers = {}
len_ = len
sum_ = sum
min_ = min
max_ = max
abs_ = abs
formatfield_2 = struct.Struct('>B')
# linkedinstances[140635091635000] is <Transformed <BitsInteger>>
# linkedinstances[140635091635168] is <Transformed <BitsInteger>>
# linkedinstances[140635091635392] is <Transformed <Transformed <BytesInteger>>>
# linkedinstances[140635091635616] is <Transformed <Transformed <BytesInteger>>>
formatfield_3 = struct.Struct('>B')
# linkedinstances[140635091571040] is <Transformed <BitsInteger>>
# linkedinstances[140635091571208] is <Transformed <BitsInteger>>
# linkedinstances[140635091571376] is <Transformed <BitsInteger>>
# linkedinstances[140635092017952] is <VarInt>
formatfield_4 = struct.Struct('>f')
formatfield_5 = struct.Struct('>d')
# linkedinstances[140635091571712] is <NullStripped <GreedyBytes>>
# linkedinstances[140635091571936] is <NullStripped <GreedyBytes>>
# linkedinstances[140635091572160] is <NullStripped <GreedyBytes>>
# linkedinstances[140635091572384] is <NullStripped <GreedyBytes>>
# linkedinstances[140635091572944] is <NullTerminated <GreedyBytes>>
# linkedinstances[140635091573112] is <NullTerminated <GreedyBytes>>
# linkedinstances[140635091573280] is <NullTerminated <GreedyBytes>>
# linkedinstances[140635091573448] is <NullTerminated <GreedyBytes>>
factory_6 = {0: EnumIntegerString.new(0, 'zero')}
factory_7 = {}
factory_8 = {0: 'zero'}
def parse_struct_9(io, this):
    result = Container()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result['field'] = this['field'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        pass
    except StopFieldError:
        pass
    return result
def parse_sequence_10(io, this):
    result = ListContainer()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        pass
    except StopFieldError:
        pass
    return result
def parse_sequence_11(io, this):
    result = ListContainer()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        this['num1'] = result[-1]
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        this['num2'] = result[-1]
        pass
    except StopFieldError:
        pass
    return result
def parse_sequence_12(io, this):
    result = ListContainer()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        pass
    except StopFieldError:
        pass
    return result
def parse_sequence_13(io, this):
    result = ListContainer()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        this['num1'] = result[-1]
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        this['num2'] = result[-1]
        pass
    except StopFieldError:
        pass
    return result
# linkedinstances[140635091674504] is <GreedyRange <FormatField>>
def parse_repeatuntil_14(io, this):
    list_ = ListContainer()
    for i in itertools.count():
        this['_index'] = i
        obj_ = formatfield_2.unpack(read_bytes(io, 1))[0]
        list_.append(obj_)
        if ((obj_ == 0)):
            return list_
def parse_const(value, expected):
    if not value == expected: raise ConstError
    return value
formatfield_15 = struct.Struct('>L')
# linkedinstances[140635092020024] is <Index +nonbuild>
# linkedinstances[140635091675568] is <GreedyRange <Sequence>>
def parse_sequence_17(io, this):
    result = ListContainer()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        result.append(linkedparsers[140635092020024](io, this, '(???)'))
        pass
    except StopFieldError:
        pass
    return result
def parse_repeatuntil_16(io, this):
    list_ = ListContainer()
    for i in itertools.count():
        this['_index'] = i
        obj_ = parse_sequence_17(io, this)
        list_.append(obj_)
        if (True):
            return list_
def parse_check(condition):
    if not condition: raise CheckError
def parse_error():
    raise ExplicitError
def parse_focusedseq_18(io, this):
    result = []
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    result.append(parse_const(read_bytes(io, 4), b'\x00\x00\x00\x00'))
    result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
    this['num'] = result[-1]
    return this['num']
def parse_focusedseq_19(io, this):
    result = []
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
    this['num'] = result[-1]
    return this[this._.focusedseq2_select]
# linkedinstances[140635092020864] is <Pickled>
# linkedinstances[140635092021032] is <Numpy>
factory_20 = collections.namedtuple('coord', 'x y z')
factory_21 = collections.namedtuple('coord', 'x y z')
# linkedinstances[140635091711536] is <GreedyRange <FormatField>>
factory_22 = collections.namedtuple('coord', 'x y z')
def parse_sequence_23(io, this):
    result = ListContainer()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        result.append(formatfield_2.unpack(read_bytes(io, 1))[0])
        pass
    except StopFieldError:
        pass
    return result
factory_24 = collections.namedtuple('coord', 'x y z')
def parse_struct_25(io, this):
    result = Container()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result['x'] = this['x'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        result['y'] = this['y'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        result['z'] = this['z'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        pass
    except StopFieldError:
        pass
    return result
# linkedinstances[140635091723656] is <TimestampAdapter <FormatField>>
# linkedinstances[140635091205536] is <MsdosTimestampAdapter <Transformed <Struct>>>
# linkedinstances[140635090776136] is <RawCopy <FormatField>>
# linkedinstances[140635090776472] is <RawCopy <FormatField>>
formatfield_27 = struct.Struct('>H')
def parse_union_26(io, this):
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    fallback = io.tell()
    this['char'] = formatfield_2.unpack(read_bytes(io, 1))[0]
    io.seek(fallback)
    this['short'] = formatfield_27.unpack(read_bytes(io, 2))[0]
    io.seek(fallback)
    this['int'] = formatfield_15.unpack(read_bytes(io, 4))[0]
    io.seek(fallback)
    del this['_']
    del this['_index']
    return this
def parse_union_28(io, this):
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    fallback = io.tell()
    this['char'] = formatfield_2.unpack(read_bytes(io, 1))[0]
    io.seek(fallback)
    this['short'] = formatfield_27.unpack(read_bytes(io, 2))[0]
    forward = io.tell()
    io.seek(fallback)
    this['int'] = formatfield_15.unpack(read_bytes(io, 4))[0]
    io.seek(forward)
    del this['_']
    del this['_index']
    return this
def parse_union_29(io, this):
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    fallback = io.tell()
    this['char1'] = formatfield_2.unpack(read_bytes(io, 1))[0]
    io.seek(fallback)
    this['char2'] = formatfield_2.unpack(read_bytes(io, 1))[0]
    io.seek(fallback)
    this['char3'] = formatfield_2.unpack(read_bytes(io, 1))[0]
    del this['_']
    del this['_index']
    return this
def parse_union_30(io, this):
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    fallback = io.tell()
    this['char1'] = formatfield_2.unpack(read_bytes(io, 1))[0]
    io.seek(fallback)
    this['char2'] = formatfield_2.unpack(read_bytes(io, 1))[0]
    io.seek(fallback)
    this['char3'] = formatfield_2.unpack(read_bytes(io, 1))[0]
    del this['_']
    del this['_index']
    return this
def parse_union_31(io, this):
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    fallback = io.tell()
    this['char'] = formatfield_2.unpack(read_bytes(io, 1))[0]
    io.seek(fallback)
    del this['_']
    del this['_index']
    return this
# linkedinstances[140635090778320] is <Select>
# linkedinstances[140635090778544] is <Select>
factory_32 = {0 : lambda io,this: formatfield_2.unpack(read_bytes(io, 1))[0], 255 : lambda io,this: parse_error()}
compiled_33 = lambda io,this: None
factory_34 = {}
compiled_35 = lambda io,this: None
factory_36 = {}
compiled_37 = lambda io,this: formatfield_2.unpack(read_bytes(io, 1))[0]
def parse_struct_38(io, this):
    result = Container()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result['type'] = this['type'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        result['name'] = this['name'] = (((restream(read_bytes(io, (formatfield_2.unpack(read_bytes(io, 1))[0])-(0)), lambda io: io.read())).decode('utf8')) if ((this['type'] == 0)) else (None))
        result['value'] = this['value'] = ((formatfield_2.unpack(read_bytes(io, 1))[0]) if ((this['type'] == 1)) else (None))
        pass
    except StopFieldError:
        pass
    return result
def parse_stopif(condition):
    if condition:
        raise StopFieldError
def parse_struct_39(io, this):
    result = Container()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        parse_stopif((this['_']['num'] == 0))
        parse_error()
        pass
    except StopFieldError:
        pass
    return result
def parse_sequence_40(io, this):
    result = ListContainer()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result.append(parse_stopif((this['_']['num'] == 0)))
        result.append(parse_error())
        pass
    except StopFieldError:
        pass
    return result
# linkedinstances[140635090797288] is <GreedyRange +nonbuild <StopIf +nonbuild>>
def parse_struct_41(io, this):
    result = Container()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result['a'] = this['a'] = (formatfield_2.unpack(read_bytes(io, 1))[0], read_bytes(io, -(1) % (4) ))[0]
        result['b'] = this['b'] = (formatfield_27.unpack(read_bytes(io, 2))[0], read_bytes(io, -(2) % (4) ))[0]
        pass
    except StopFieldError:
        pass
    return result
# linkedinstances[140635090798632] is <Transformed <Struct>>
def parse_pointer(io, offset, func):
    fallback = io.tell()
    io.seek(offset, 2 if offset < 0 else 0)
    obj = func()
    io.seek(fallback)
    return obj
def parse_peek(io, func):
    fallback = io.tell()
    try:
        return func()
    except ExplicitError:
        raise
    except ConstructError:
        pass
    finally:
        io.seek(fallback)
# linkedinstances[140635091564360] is <Terminated +nonbuild>
# linkedinstances[140635090799360] is <RawCopy <FormatField>>
# linkedinstances[140635090799584] is <RawCopy <RawCopy <RawCopy <FormatField>>>>
# linkedinstances[140635090799752] is <Transformed <BytesInteger>>
# linkedinstances[140635090799920] is <Transformed <BytesInteger>>
# linkedinstances[140635090825624] is <NullTerminated <GreedyBytes>>
# linkedinstances[140635090825792] is <NullStripped <GreedyBytes>>
# linkedinstances[140635090826464] is <Compressed <GreedyBytes>>
def parse_struct_1(io, this):
    result = Container()
    this = Container(_ = this, _params = this['_params'], _root = None, _parsing = True, _building = False, _sizing = False, _subcons = None, _io = io, _index = this.get('_index', None))
    this['_root'] = this['_'].get('_root', this)
    try:
        result['num'] = this['num'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        result['bytes1'] = this['bytes1'] = read_bytes(io, 4)
        result['bytes2'] = this['bytes2'] = read_bytes(io, this['num'])
        result['greedybytes'] = this['greedybytes'] = restream(read_bytes(io, (formatfield_2.unpack(read_bytes(io, 1))[0])-(0)), lambda io: io.read())
        result['bitwise1'] = this['bitwise1'] = linkedparsers[140635091635000](io, this, '(???)')
        result['bitwise2'] = this['bitwise2'] = linkedparsers[140635091635168](io, this, '(???)')
        result['bytewise1'] = this['bytewise1'] = linkedparsers[140635091635392](io, this, '(???)')
        result['bytewise2'] = this['bytewise2'] = linkedparsers[140635091635616](io, this, '(???)')
        result['formatfield'] = this['formatfield'] = formatfield_3.unpack(read_bytes(io, 1))[0]
        result['bytesinteger0'] = this['bytesinteger0'] = bytes2integer(read_bytes(io, 0), False)
        result['bytesinteger1'] = this['bytesinteger1'] = bytes2integer(read_bytes(io, 16)[::-1], False)
        result['bytesinteger2'] = this['bytesinteger2'] = bytes2integer(read_bytes(io, 16), False)
        result['bytesinteger3'] = this['bytesinteger3'] = bytes2integer(read_bytes(io, this['num']), False)
        result['bitsinteger0'] = this['bitsinteger0'] = linkedparsers[140635091571040](io, this, '(???)')
        result['bitsinteger1'] = this['bitsinteger1'] = linkedparsers[140635091571208](io, this, '(???)')
        result['bitsinteger2'] = this['bitsinteger2'] = linkedparsers[140635091571376](io, this, '(???)')
        result['varint'] = this['varint'] = linkedparsers[140635092017952](io, this, '(???)')
        result['byte'] = this['byte'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        result['float1'] = this['float1'] = formatfield_4.unpack(read_bytes(io, 4))[0]
        result['float2'] = this['float2'] = formatfield_5.unpack(read_bytes(io, 8))[0]
        result['string2'] = this['string2'] = (restream(read_bytes(io, 12), lambda io: linkedparsers[140635091571712](io, this, '(???)'))).decode('ascii')
        result['string2'] = this['string2'] = (restream(read_bytes(io, 12), lambda io: linkedparsers[140635091571936](io, this, '(???)'))).decode('utf8')
        result['string3'] = this['string3'] = (restream(read_bytes(io, 12), lambda io: linkedparsers[140635091572160](io, this, '(???)'))).decode('utf16')
        result['string4'] = this['string4'] = (restream(read_bytes(io, 12), lambda io: linkedparsers[140635091572384](io, this, '(???)'))).decode('utf32')
        result['pascalstring1'] = this['pascalstring1'] = (restream(read_bytes(io, (formatfield_2.unpack(read_bytes(io, 1))[0])-(0)), lambda io: io.read())).decode('ascii')
        result['pascalstring2'] = this['pascalstring2'] = (restream(read_bytes(io, (formatfield_2.unpack(read_bytes(io, 1))[0])-(0)), lambda io: io.read())).decode('utf8')
        result['cstring1'] = this['cstring1'] = (linkedparsers[140635091572944](io, this, '(???)')).decode('ascii')
        result['cstring2'] = this['cstring2'] = (linkedparsers[140635091573112](io, this, '(???)')).decode('utf8')
        result['cstring3'] = this['cstring3'] = (linkedparsers[140635091573280](io, this, '(???)')).decode('utf16')
        result['cstring4'] = this['cstring4'] = (linkedparsers[140635091573448](io, this, '(???)')).decode('utf32')
        result['greedystring1'] = this['greedystring1'] = restream(read_bytes(io, (formatfield_2.unpack(read_bytes(io, 1))[0])-(0)), lambda io: (io.read()).decode('ascii'))
        result['greedystring2'] = this['greedystring2'] = restream(read_bytes(io, (formatfield_2.unpack(read_bytes(io, 1))[0])-(0)), lambda io: (io.read()).decode('utf8'))
        result['flag'] = this['flag'] = (read_bytes(io, 1) != b'\x00')
        result['enum1'] = this['enum1'] = reuse(formatfield_2.unpack(read_bytes(io, 1))[0], lambda x: factory_6.get(x, EnumInteger(x)))
        result['enum2'] = this['enum2'] = reuse(formatfield_2.unpack(read_bytes(io, 1))[0], lambda x: factory_7.get(x, EnumInteger(x)))
        result['flagsenum1'] = this['flagsenum1'] = reuse(formatfield_2.unpack(read_bytes(io, 1))[0], lambda x: Container(zero=bool(x & 0), one=bool(x & 1)))
        result['flagsenum2'] = this['flagsenum2'] = reuse(formatfield_2.unpack(read_bytes(io, 1))[0], lambda x: Container())
        result['mapping'] = this['mapping'] = factory_8[formatfield_2.unpack(read_bytes(io, 1))[0]]
        result['struct'] = this['struct'] = parse_struct_9(io, this)
        result['embeddedfield1'] = this['embeddedfield1'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        result['sequence1'] = this['sequence1'] = parse_sequence_10(io, this)
        result['sequence2'] = this['sequence2'] = parse_sequence_11(io, this)
        result['embeddedsequence1'] = this['embeddedsequence1'] = parse_sequence_12(io, this)
        result['embeddedsequence2'] = this['embeddedsequence2'] = parse_sequence_13(io, this)
        result['array1'] = this['array1'] = ListContainer((this.__setitem__('_index',i),(formatfield_2.unpack(read_bytes(io, 1))[0]))[1] for i in range(5))
        result['array2'] = this['array2'] = ListContainer((this.__setitem__('_index',i),(formatfield_2.unpack(read_bytes(io, 1))[0]))[1] for i in range(this['num']))
        result['greedyrange0'] = this['greedyrange0'] = restream(read_bytes(io, (formatfield_2.unpack(read_bytes(io, 1))[0])-(0)), lambda io: linkedparsers[140635091674504](io, this, '(???)'))
        result['repeatuntil1'] = this['repeatuntil1'] = parse_repeatuntil_14(io, this)
        result['const1'] = this['const1'] = parse_const(read_bytes(io, 4), b'\x00\x00\x00\x00')
        result['const2'] = this['const2'] = parse_const(formatfield_15.unpack(read_bytes(io, 4))[0], 0)
        result['computed'] = this['computed'] = this.num
        result['index1'] = this['index1'] = ListContainer((this.__setitem__('_index',i),(linkedparsers[140635092020024](io, this, '(???)')))[1] for i in range(3))
        result['index2'] = this['index2'] = restream(b'\x00', lambda io: linkedparsers[140635091675568](io, this, '(???)'))
        result['index3'] = this['index3'] = restream(b'\x00', lambda io: parse_repeatuntil_16(io, this))
        result['rebuild'] = this['rebuild'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        result['default'] = this['default'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        parse_check((this['num'] == 0))
        result['check'] = this['check'] = parse_check((this['num'] == 0))
        result['error0'] = this['error0'] = ((parse_error()) if (False) else (None))
        result['focusedseq1'] = this['focusedseq1'] = parse_focusedseq_18(io, this)
        result['focusedseq2_select'] = this['focusedseq2_select'] = 'num'
        result['focusedseq2'] = this['focusedseq2'] = parse_focusedseq_19(io, this)
        result['pickled_data'] = this['pickled_data'] = b"(lp0\n(taI1\naF2.3\na(dp1\na(lp2\naS'1'\np3\naS''\np4\na."
        result['pickled'] = this['pickled'] = restream(this.pickled_data, lambda io: linkedparsers[140635092020864](io, this, '(???)'))
        result['numpy_data'] = this['numpy_data'] = b"\x93NUMPY\x01\x00F\x00{'descr': '<i8', 'fortran_order': False, 'shape': (3,), }            \n\x01\x00\x00\x00\x00\x00\x00\x00\x02\x00\x00\x00\x00\x00\x00\x00\x03\x00\x00\x00\x00\x00\x00\x00"
        result['numpy1'] = this['numpy1'] = ((restream(this.numpy_data, lambda io: linkedparsers[140635092021032](io, this, '(???)'))) if (True) else (None))
        result['namedtuple1'] = this['namedtuple1'] = factory_20(*(ListContainer((this.__setitem__('_index',i),(formatfield_2.unpack(read_bytes(io, 1))[0]))[1] for i in range(3))))
        result['namedtuple2'] = this['namedtuple2'] = restream(b'\x00\x00\x00', lambda io: factory_21(*(linkedparsers[140635091711536](io, this, '(???)'))))
        result['namedtuple3'] = this['namedtuple3'] = factory_22(*(parse_sequence_23(io, this)))
        result['namedtuple4'] = this['namedtuple4'] = factory_24(**(parse_struct_25(io, this)))
        result['timestamp1'] = this['timestamp1'] = restream(b'\x00\x00\x00\x00ZIz\x00', lambda io: linkedparsers[140635091723656](io, this, '(???)'))
        result['timestamp2'] = this['timestamp2'] = restream(b'H9\x8c"', lambda io: linkedparsers[140635091205536](io, this, '(???)'))
        result['hex1'] = this['hex1'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        result['hex2'] = this['hex2'] = read_bytes(io, 1)
        result['hex3'] = this['hex3'] = linkedparsers[140635090776136](io, this, '(???)')
        result['hexdump1'] = this['hexdump1'] = read_bytes(io, 1)
        result['hexdump2'] = this['hexdump2'] = linkedparsers[140635090776472](io, this, '(???)')
        result['union1'] = this['union1'] = parse_union_26(io, this)
        result['union2'] = this['union2'] = parse_union_28(io, this)
        result['union3'] = this['union3'] = parse_union_29(io, this)
        result['union4'] = this['union4'] = parse_union_30(io, this)
        result['unionembedded'] = this['unionembedded'] = parse_union_31(io, this)
        result['select'] = this['select'] = linkedparsers[140635090778320](io, this, '(???)')
        result['optional'] = this['optional'] = linkedparsers[140635090778544](io, this, '(???)')
        result['if1'] = this['if1'] = ((formatfield_2.unpack(read_bytes(io, 1))[0]) if ((this['num'] == 0)) else (None))
        result['ifthenelse'] = this['ifthenelse'] = ((formatfield_2.unpack(read_bytes(io, 1))[0]) if ((this['num'] == 0)) else (formatfield_2.unpack(read_bytes(io, 1))[0]))
        result['switch1'] = this['switch1'] = factory_32.get(this['num'], compiled_33)(io, this)
        result['switch2'] = this['switch2'] = factory_34.get(this['num'], compiled_35)(io, this)
        result['switch3'] = this['switch3'] = factory_36.get(this['num'], compiled_37)(io, this)
        result['embeddedswitch1'] = this['embeddedswitch1'] = parse_struct_38(io, this)
        result['stopif0'] = this['stopif0'] = parse_stopif((this['num'] == 255))
        result['stopif1'] = this['stopif1'] = parse_struct_39(io, this)
        result['stopif2'] = this['stopif2'] = parse_sequence_40(io, this)
        result['stopif3'] = this['stopif3'] = linkedparsers[140635090797288](io, this, '(???)')
        result['padding'] = this['padding'] = (None, read_bytes(io, (2)-(0) ))[0]
        result['paddedbyte'] = this['paddedbyte'] = (formatfield_2.unpack(read_bytes(io, 1))[0], read_bytes(io, (4)-(1) ))[0]
        result['alignedbyte'] = this['alignedbyte'] = (formatfield_2.unpack(read_bytes(io, 1))[0], read_bytes(io, -(1) % (4) ))[0]
        result['alignedstruct'] = this['alignedstruct'] = parse_struct_41(io, this)
        result['bitstruct'] = this['bitstruct'] = linkedparsers[140635090798632](io, this, '(???)')
        result['pointer'] = this['pointer'] = parse_pointer(io, 0, lambda: formatfield_2.unpack(read_bytes(io, 1))[0])
        result['peek'] = this['peek'] = parse_peek(io, lambda: formatfield_2.unpack(read_bytes(io, 1))[0])
        result['seek0'] = this['seek0'] = io.seek(0, 1)
        result['tell'] = this['tell'] = io.tell()
        result['pass1'] = this['pass1'] = None
        result['terminated0'] = this['terminated0'] = restream(read_bytes(io, (formatfield_2.unpack(read_bytes(io, 1))[0])-(0)), lambda io: linkedparsers[140635091564360](io, this, '(???)'))
        result['rawcopy1'] = this['rawcopy1'] = linkedparsers[140635090799360](io, this, '(???)')
        result['rawcopy2'] = this['rawcopy2'] = linkedparsers[140635090799584](io, this, '(???)')
        result['bytesswapped'] = this['bytesswapped'] = linkedparsers[140635090799752](io, this, '(???)')
        result['bitsswapped'] = this['bitsswapped'] = linkedparsers[140635090799920](io, this, '(???)')
        result['prefixed1'] = this['prefixed1'] = restream(read_bytes(io, (formatfield_2.unpack(read_bytes(io, 1))[0])-(0)), lambda io: io.read())
        result['prefixed2'] = this['prefixed2'] = restream(b'\x01', lambda io: restream(read_bytes(io, (formatfield_2.unpack(read_bytes(io, 1))[0])-(1)), lambda io: io.read()))
        result['prefixedarray'] = this['prefixedarray'] = ListContainer((formatfield_2.unpack(read_bytes(io, 1))[0]) for i in range(formatfield_2.unpack(read_bytes(io, 1))[0]))
        result['fixedsized'] = this['fixedsized'] = restream(read_bytes(io, 10), lambda io: io.read())
        result['nullterminated'] = this['nullterminated'] = restream(b'\x01\x00', lambda io: linkedparsers[140635090825624](io, this, '(???)'))
        result['nullstripped'] = this['nullstripped'] = restream(b'\x01\x00', lambda io: linkedparsers[140635090825792](io, this, '(???)'))
        result['restreamdata'] = this['restreamdata'] = restream(b'\xff', lambda io: formatfield_2.unpack(read_bytes(io, 1))[0])
        result['restreamdata_verify'] = this['restreamdata_verify'] = parse_check((this['restreamdata'] == 255))
        result['compressed_bzip2_data'] = this['compressed_bzip2_data'] = b'BZh91AY&SYSc\x11\x99\x00\x00\x00A\x00@\x00@\x00 \x00!\x00\x82\x83\x17rE8P\x90Sc\x11\x99'
        result['compressed_bzip2'] = this['compressed_bzip2'] = restream(this.compressed_bzip2_data, lambda io: linkedparsers[140635090826464](io, this, '(???)'))
        print(this)
        result['debugger'] = this['debugger'] = formatfield_2.unpack(read_bytes(io, 1))[0]
        result['items1'] = this['items1'] = [1, 2, 3]
        result['len_'] = this['len_'] = len_(this.items1)
        pass
    except StopFieldError:
        pass
    return result
def parseall(io, this):
    return parse_struct_1(io, this)
compiled = Compiled(None, None, parseall)
